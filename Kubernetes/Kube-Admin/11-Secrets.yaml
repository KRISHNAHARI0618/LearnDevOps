Secrets in Kubernetes: Stores Key value pairs encoded mode only anyone who has the access to see encoded values can decode and can decode the values

There are Two Steps involved
1: Creating a Pod
2: Injecting it into Pod Definition File

two ways we can create a secrets
1: Imperative way through CLI

 kubectl create secret <secret-name> --from-literal=key=value

 kubectl create secret <secret-name> --from-file=app-secrets.properties

2: Declarative Way Through Yam File

SecretMap Definition File:
apiVersion: v1
kind: Secret
metadata
  name: app-secret
data:
  db-name: mysql
  db-user: root
  db-password: passwrd

Using That in Pod Definition file:

apiVersion: v1
kind: Pod
metadata:
  name: using-secret
spec:
  containers:
  - name: pod-def1
    image: nginx
    ports:
    - containerPort: 80
    env:
    - name: db-name
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: db-name
    - name: db-user
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: db-user
    - name: db-password
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: db-password

Using envFrom in Pod Definition File:
envFrom:
- secretRef:
    name: app-secret

Encrypting Secret Data at Rest:
- When You inject Secret Key with encoded format etcd-ctl will store those in the form of normal text hence any one who has the access to view etcd can see the secrets.
- using Encryption Option we can use to encrypt the secrets in EncryptionConfiguration

encrypting the secrets:
- head -c 32 /dev/urandom | base64

