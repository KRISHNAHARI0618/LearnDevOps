Container Run Time Interface:

Pod :

Create veth pair: ip link add ...

Attach veth pair: ip link set ...

Assign Ip Address: ip -n <namespace> addr add

Bring Up Interface: ip -n <namespace> link set

1: pod first create a veth pair
2: attach it

Compare it with VPC:
1: Create a VPC/Network/Veth
2: Assign IP Address/CIDR
3: Default Gateway/Internet Gateway to access
4: Assign that Ip Address to Gate way

Container Network Interface:

CNI define the responsibilities of Container Run Time
Container Run time must create network namespace
In kubernetes Container Run time is responsible to identify the network and container must attach to
Container run time is responsible to invoke network plugin when container is added

Container Network Plugin: is configured in each kubelet service
1: kubelet service = /usr/local/bin/kubelet
--network-plugin=cni\\
--cni-bin-dir=/opt/cni/bin
--cni-conf-dir=/etc/cni/net.d

CNI Weave Works: WeaveWorks Weave CNI Plugin
Weave CNI Plugin in and its Agents are deployed as a Daemon Set in all nodes so that they can interact with each other in the Container network interface Environment

ps -aux | grep -i kubelet | grep container-runtime

Ip Address management: 10.32.0.0/32
10.32.0.1 -- 10.47.255.254

What is the Network range for AWS VPC:
10.0.0.0 -- 10.255.255.255(10/8)
172.16.0.0 -- 172.32.255.255 (172.16/12)
192.168.0.0 -- 192.168.255.255 (192.168/16)

Service Networking:

Pod Ip Ranges: 10.244.0.0 -- 10.244.255.255
Node Ip Ranges: 10.96.0.0 -- 10.111.255.254

Node Port Range: 30000 - 32000

DNS in kubernetes:
Built in DNS

1: Pod-Service:
2: Service : https://web-service
3: Separate Namespace : apps is the name
https://web-service.apps
4: Sub-Domain: svc
https://web-service.apps.svc
5: Root Domain: Cluster level
https://web-service.apps.svc.cluster.local

web-service --> apps --> svc --> cluster.local


