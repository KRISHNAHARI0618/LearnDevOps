pipeline{
  // agent any
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  options {
      timeout(time: 1, unit: 'HOURS')
      ansiColor('xterm')
  }
  environment{
    name='Peddireddy'
    course='DevOps123'
    SCANNER_HOME= tool 'sonar-scanner'
    SONAR_URL="http://localhost:9000/"
    SONAR_TOKEN="squ_4cf8bfb2c0bcaae78ec35f8574132df026ad02cc"
  }
  stages{
    stage('Building Environment Variables'){
      steps{
        echo "My Name is : ${name}"
        echo "My Name is : ${course}"
      }
    }
    stage('Checkout') {
    steps {
      sh 'echo passed'
      git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    // stage('SonarQube Scanning') {
    //     steps {
    //       withCredentials([string(credentialsId: 'sonarqube1', variable: 'SONAR_AUTH_TOKEN')]) {
    //          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'

    //       }
    //       // sh '''
    //       // $SCANNER_HOME/bin/sonar-scanner -Dsonar.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectName=shopping-cart -Dsonar.java.binaries=. -Dsonar.projectKey=shopping-cart
    //       // '''
    //     }
    // }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
  }
}
